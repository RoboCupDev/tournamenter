<style type="text/css">

.spot-scores{
	margin-bottom: 0px;
}

</style>


<!-- CONTENT -->
<div class="row clearfix" id="tables-view">

	<div class="col-md-12 column">

		<!-- CREATE TABLE -->
		<p class="pull-right">
			<button type="button" id="btn-create-table" class="btn btn-success">
				<span class="glyphicon glyphicon-plus"></span> Create New Table
			</button>
		</p>
		<div class="clearfix"></div>
	</div>
	
	<div class="col-md-12 column" id="spot-tables">
	</div>
</div>
<!--/ CONTENT -->


<!--  TABLE VIEW TEMPLATE -->
<script type="text/template" id="template-table-view">

	<!-- <div class="panel panel-info"> -->
		<div class="panel-heading">

			<!-- Table tools -->
			<div class="pull-right">
				
				
				<!-- Actions of the table. Only shown when not locked -->
				<div class="btn-group">
					<button class="btn-table-refresh btn btn-xs btn-info">
						<span class="glyphicon glyphicon-refresh"></span> Refresh
					</button>
					<button type="button" class="btn btn-xs btn-info dropdown-toggle" data-toggle="dropdown">
						<span class="caret"></span>
						<span class="sr-only">Toggle Dropdown</span>
					</button>

					<ul class="dropdown-menu" role="menu">
						<!-- Table actions -->
						<li role="presentation" class="dropdown-header">Table Actions</li>
						<li><a class="btn-table-destroy" href="#">
							<span class="glyphicon glyphicon-trash"></span> Delete Table
						</a></li>

						<!-- Import/Export actions -->
						<li class="divider"></li>
						<li role="presentation" class="dropdown-header">Import/Export</li>
						<li><a href="#">Import all teams</a></li>
					</ul>
				</div>

				<input type="checkbox" class="table-locked switch-mini"
					data-on="success" data-on-label="<i class='glyphicon glyphicon-pencil'></i>"
					data-off="danger" data-off-label="<i class='glyphicon glyphicon-ban-circle'></i>">
			</div>

			<span class="panel-title">
				<strong><span class="table-name" data-name="name" data-title="Table name">{{name}}</span></strong>
			</span>
		</div>

		<!-- Configuration panel -->
		<!-- <div class="collapsible">
			<div class="form-horizontal panel-body">

				<div class="form-group">
					<label class="col-sm-2 control-label">Email</label>
					<div class="col-sm-10">
						<div class="table-sort">ASC</div>
					</div>
				</div>
				<div class="form-group">
					<label class="col-sm-2 control-label">Password</label>
					<div class="col-sm-10">
						<div class="table-sort">ASC</div>
					</div>
				</div>

			</div>
		</div>

		<button type="button" class="btn-collapse btn btn-primary btn-xs btn-block">
			Hide options
		</button> -->

		<div class="collapsible">

			<table class="spot-scores table table-striped table-bordered table-condensed table-responsive">
				<thead>
				</thead>
				<tbody>
				</tbody>
			</table>
		</div>

		<button type="button" class="btn-collapse btn btn-info btn-xs btn-block">
			Hide Table
		</button>
	<!-- </div> -->
</script>
<!--/ TABLE VIEW TEMPLATE -->


<!--  SCORES HEADER VIEW TEMPLATE -->
<script type="text/template" id="template-scores-header">
	<tr>
		<th><span class="editable" data-name="headerRank">{{headerRank}}</span></th>
		<th><span class="editable" data-name="headerTeam">{{headerTeam}}</span></th>
		<!-- Use the class anchor-score to know where to prepend extra score headers -->
		<th class="anchor-score">
			<span class="editable" data-name="headerScore">{{headerScore}}</span> 1
		</th>
		<th><span class="editable" data-name="headerFinal">{{headerFinal}}</span></th>
	</tr>
</script>
<!--/ SCORES HEADER VIEW TEMPLATE -->

<!--  SCORES DATA VIEW TEMPLATE -->
<script type="text/template" id="template-scores-row">
	<tr>
		<td>{{rank}}</td>
		<td>{{team.name}}</td>
		<!-- Use tde class anchor-score to know where to prepend extra score headers -->
		<td class="anchor-score">{{final}}</td>
	</tr>
</script>
<!--/ SCORES DATA VIEW TEMPLATE -->



<script type="text/javascript">

// Wait until page load is complet
$(document).ready(function(){




/*
  ************************************************************
	Table Views (Keep track of ONE table object)
  ************************************************************
*/
App.Views.Table = Backbone.View.extend({
	
	tagName: 'div',
	className: 'panel panel-info',
	template: _.template($('#template-table-view').html()),

	// Events
	events: {
		'click .btn-table-destroy': 'createTable',
		'click .btn-table-refresh': 'refresh',
		'click .btn-table-destroy': 'confirmDestroyAction',
	},
	
	initialize: function(){
		console.log('initialized: '+this.model.id);
		this.listenTo(this.model, 'change', this.render);
		this.listenTo(this.model, 'destroy', this.destroy);

		this.listenTo(this.model, 'request', this.startSync);
		this.listenTo(this.model, 'sync', this.endSync);
		this.listenTo(this.model, 'change', this.endSync);
		this.listenTo(this.model, 'add', this.endSync);
		this.listenTo(this.model, 'remove', this.endSync);
		this.listenTo(this.model, 'reset', this.endSync);

		this.$btnRefresh = this.$('btn-table-refresh');
	},

	render: function(){
		console.log('rendering: '+this.model.id);
		// Render with data
		var dict = this.model.toJSON();
		var html = this.template(dict);
		this.$el.html(html);

		// Configure in-place editors
		this.configureTitleBar()
			.renderScoresHeader()
			.renderScoresData();

		return this;
	},

	// Setup in place edition and fields callbacks in title bar
	configureTitleBar: function(){
		// Configure table name edition
		var $name = this.$('.table-name');
		App.Mixins.editInPlace(this.model, $name);

		return this;
	},

	// Render Scores header
	templateScoresHeader: _.template($('#template-scores-header').html()),
	renderScoresHeader: function(){
		// Find table spot
		$table = this.$('.spot-scores');

		// Render headers with data
		var dict = this.model.toJSON();

		var $html = $(this.templateScoresHeader(dict));

		// Create extra score header columns
		$scoresHeader = $html.find('.anchor-score');
		for(var i = dict.columns*1; i > 1; i--){
			var newHeader = $('<th>').text(dict.headerScore + ' ' + i);
			newHeader.insertAfter($scoresHeader);
		}

		// Make editable
		App.Mixins.editInPlace(this.model, $html.find('.editable'), {
			mode: 'popup',
		});

		$table.find('thead').html($html);

		return this;
	},

	templateScoresRow: _.template($('#template-scores-row').html()),
	renderScoresData: function(){
		var view = this;
		// Find table spot
		$table = view.$('.spot-scores');
		rows = [];//$('<tbody>');

		// Render headers with data
		var scores = view.model.get('scores');
		var columns = view.model.get('columns')*1;

		// For each object in the array, create a new row with it
		_(scores).forEach(function(rowData){
			createRow(rowData);
		});

		// Snipped used to create a row for each score in table
		function createRow(rowData){
			console.log(rowData);
			var $html = $(view.templateScoresRow(rowData));

			// Create extra scores columns
			$scoresAnchor = $html.find('.anchor-score');
			var scores = rowData.scores;
			for(var i = 1; i <= columns; i++){
				var scoreValue = (scores[i] ? scores[i].value : null) || '-';
				var newHeader = $('<td>').text(scoreValue);
				newHeader.insertBefore($scoresAnchor);
			}

			rows.push($html);
		}

		// Change tbody to new one just generated
		$table.find('tbody').html(rows);

		return this;
	},

	destroy: function(){
		this.$el.remove();
	},

	refresh: function(){
		console.log('refresh: '+this.model.id);
		var view = this;
		this.startSync();
		this.model.fetch();
		return this;
	},

	confirmDestroyAction: function(evt){
		var view = this;
		// Stop link
		evt.preventDefault();

		var message = 'Are you shure that you want to delete the ENTIRE table "'+view.model.get('name')+'"?';
		App.Mixins.confirmAction(message, false, function(){
			view.model.destroy({wait: true});
		});
	},

	startSync: function(){
		// Disable refresh button and animate icon
		this.$btnRefresh.attr('disabled', true);
		this.$btnRefresh.find('.glyphicon').addClass('icon-rotate');
	},

	endSync: function(){
		// Enable button and stop rotating
		this.$btnRefresh.removeAttr('disabled');
		this.$btnRefresh.find('.glyphicon').removeClass('icon-rotate');
	},
});





/*
  ************************************************************
	Table Collection views (Keep track of ALL table objects)
  ************************************************************
*/
App.Views.Tables = Backbone.View.extend({

	// Private storage of team views
	_views: {},

	$tablesSpot: null,

	// Events
	events: {
		'click #btn-create-table': 'createTable',
	},

	initialize: function(){
		this.listenTo(this.collection, 'add', this.add);
		this.listenTo(this.collection, 'remove', this.remove);
		this.listenTo(this.collection, 'reset', this.render);

		this.$tablesSpot = this.$('#spot-tables');
	},

	render: function(){
		var view = this;

		// Go through all models inside the collection, adding to the view
		_(this.collection.models).each(function(model){
			// Create and add view
			view.add(model);
		});
	},

	refresh: function(){
		var view = this;
		this.startSync();
		this.collection.fetch();
		return this;
	},

	createTable: function(){
		this.collection.create({}, {wait: true});
	},

	add: function(model, collection, options){
		// If model exists, skip
		if(this._views[model.id])
			return this;

		var tableView = new App.Views.Table({
			model: model
		});

		// Register in views and append to views
		var shouldAnimate = collection ? true : false;
		this._views[model.id] = tableView;
		this.appendView(tableView, shouldAnimate);
		return this;
	},

	remove: function(model){
		// If model doesn't exist, skip it
		if(!this._views[model.id])
			return this;

		// Sub-view should remove() itself
		model.trigger('destroy');
		delete this._views[model.id];
		return this;
	},

	appendView: function(view, shouldAnimate){
		this.$tablesSpot.prepend(view.render().$el.hide());
		if(shouldAnimate)
			view.$el.slideDown();
		else
			view.$el.show();

		return this;
	},

});

$(document).ready(function(){

	/*
		Create collection
	*/
	App.tables = new App.Collections.Tables();

	/*
		Create Views
	*/
	App.tablesView = new App.Views.Tables({
		collection: App.tables,
		el: '#tables-view'
	});

	/*
		Load models
	*/
	App.tables.reset(<%- JSON.stringify(tables) %>);

});

});
</script>