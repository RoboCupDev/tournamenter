<link rel="stylesheet" href="/css/page-transitions.css">
<link rel="stylesheet" href="/css/view-default.css">
<script src="/js/page-transitions.js"></script>

<style type="text/css">

.side-menu {
	position: absolute;

	top: 0;
	left: 0;
	left: -300px;
	width: 300px;
	height: 100%;
	z-index: 100;
	
	background: #48a770;
	-webkit-transition: left 0.5s 0.6s;
			transition: left 0.5s 0.6s;
}

#wrapper{
	-webkit-transition: opacity 0.5s;
			transition: opacity 0.5s;
}

.menu-open .side-menu,
.side-menu:hover {
	left: 0px;
}

.menu-open .side-menu,
.side-menu:hover ~ #wrapper{
	opacity: 0.3;
}

.side-menu .handle {
	position: absolute;
	top: 0px;
	right: -50px;
	/*top: 50%;*/
	width: 50px;
	height: 100%;
	opacity: 0;
	-webkit-transition: opacity 0.5s;
			transition: opacity 0.5s;
	/*background-color: rgba(0,0,0,0.5);*/
	background: -moz-linear-gradient(left, rgba(0,0,0,0.65) 0%, rgba(0,0,0,0) 100%);
	background: -webkit-gradient(linear, left top, right top, color-stop(0%,rgba(0,0,0,0.65)),
		color-stop(100%,rgba(0,0,0,0)));
	background: -webkit-linear-gradient(left, rgba(0,0,0,0.65) 0%,rgba(0,0,0,0) 100%);
	background: -o-linear-gradient(left, rgba(0,0,0,0.65) 0%,rgba(0,0,0,0) 100%);
	background: -ms-linear-gradient(left, rgba(0,0,0,0.65) 0%,rgba(0,0,0,0) 100%);
	background: linear-gradient(to right, rgba(0,0,0,0.65) 0%,rgba(0,0,0,0) 100%);
	filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#a6000000',
		endColorstr='#00000000',GradientType=1 );
}
.side-menu:hover .handle {
	opacity: 0.5;
}
.side-menu .handle::before{
	top: 50%;
	position: relative;
	font-size: 30px;
	color: #FFF;
}


/* content style */
/*.side-menu ul {
	margin: 0;
	padding: 0;
	list-style: none;
}

.side-menu h2 {
	margin: 0;
	padding: 1em;
	color: rgba(0,0,0,0.4);
	text-shadow: 0 0 1px rgba(0,0,0,0.1);
	font-weight: 300;
	font-size: 2em;
}

.side-menu ul li a {
	display: block;
	padding: 1em 1em 1em 1.2em;
	outline: none;
	box-shadow: inset 0 -1px rgba(0,0,0,0.2);
	color: #f3efe0;
	text-transform: uppercase;
	text-shadow: 0 0 1px rgba(255,255,255,0.1);
	letter-spacing: 1px;
	font-weight: 400;
	-webkit-transition: background 0.3s, box-shadow 0.3s;
	transition: background 0.3s, box-shadow 0.3s;
}

.side-menu ul li:first-child a {
	box-shadow: inset 0 -1px rgba(0,0,0,0.2), inset 0 1px rgba(0,0,0,0.2);
}

.side-menu ul li a:hover {
	background: rgba(0,0,0,0.2);
	box-shadow: inset 0 -1px rgba(0,0,0,0);
	color: #fff;
}*/


</style>

<div id="container" class="">

	<nav class="side-menu">
		<h2 class="text-center"><span class="glyphicon glyphicon-cog"></span> Settings</h2>
		<ul class="">
			<li><a class="icon icon-data" href="#">Here</a></li>
			<li><a class="icon icon-location" href="#">Comes</a></li>
			<li><a class="icon icon-study" href="#">the</a></li>
			<li><a class="icon icon-photo" href="#">SUPER</a></li>
			<li><a class="icon icon-wallet" href="#">COOL</a></li>
			<li><a class="icon icon-wallet" href="#">SIDE</a></li>
			<li><a class="icon icon-wallet" href="#">MENU</a></li>
		</ul>
		<span class="handle glyphicon glyphicon-chevron-right"></span>
	</nav>

	<div id="wrapper">

		<div id="pages" class="pt-perspective">
		</div>
			
		<div id="page-navigation" class="dotstyle dotstyle-scaleup">
			<ul>
				
			</ul>
		</div>

		<footer>
			<span class="logo">
				<img src="/img/logo_robocup.png"/>
			</span>
			
			<h1 class="title">Rescue B</h1>

			<p class="footnote">
				Developed by Ivan Seidel | <a href="mailto:ivanseidel@gmail.com">ivanseidel@gmail.com</a>
			</p>
		</footer>

	</div>

</div>



<script type="text/javascript">


/*
	Page indicator View
*/
var PageIndicator = Backbone.View.extend({

	page: -1,
	count: 0,

	initialize: function(){

	},

	render: function(){
		// var currentCount  = this.$el.length;
		var targetTotal = this.getCount();

		// Remove extra items
		var safe = 0;
		while(this.$el.children().length > targetTotal){
			console.log('creating element');
			this.removeElement();
			safe++;
			if(safe > 100) break;
		}
		// Add new items
		safe = 0;
		while(this.$el.children().length < targetTotal){
			this.addElement(this.$el.children().length);
			safe++;
			if(safe > 100) break;
		}

		// Reset current item classes
		var $lis = this.$el.children();
		$lis.removeClass('current');
		$lis.eq(this.getPage()).addClass('current');

		return this;
	},

	// Remove the element "el". If not set, will remove the last one
	removeElement: function(el){
		if(!el)
			el = this.$el.last();
		else
			el = $(el);

		el.fadeOut(el.remove);
	},

	addElement: function(index){
		var view = this;
		var element = $('<li><a href="#"></a></li>');
		this.$el.append(element);
		// Callback change action
		element.click(function(){
			view.trigger('selectpage:'+index, index);
			view.trigger('selectpage', index);
		});
		return element;
	},

	/*
		Getters and setters for Page and Count
	*/
	getPage: function(){
		if(_.isFunction(this.page))
			return this.page();
		return this.page;
	},
	setPage: function(page){
		this.page = page;
		this.render();
		this.trigger('setpage', this.getPage());
		return this;
	},

	getCount: function(){
		if(_.isFunction(this.count))
			return this.count();
		return this.count;
	},
	setCount: function(count){
		this.count = count;
		this.render();
		this.trigger('setcount', this.getCount());
		return this;
	}
});



var GlobalViewController = Backbone.View.extend({

	pageIndicator: null,

	initialize: function () {
		console.log('Init GlobalViewController');
		var view = this;
		view.pages = this.model.get('Pages');

		// Instantiate the transition object
		this.pageTransitions = new App.Views.PageTransitions();

		// Instantiate the page indicator and setup it
		this.pageIndicator = new PageIndicator({ el: '#page-navigation ul' });
		// Listen to selection on pageIndicator to change pages
		this.listenTo(this.pageIndicator, 'selectpage', this.setCurrentPage, this);
		// Listen for changes on pages to update page indicator
		this.listenTo(view.pages, 'reset add remove', this.updatePageIndicator);

		// Listen to add/remove/reset on pages
		this.listenTo(view.pages, 'reset add', this.render);

		// var testViews = $('.pt-page');
		// var i = -1;
		// setInterval(next, 4000);
		// next();
		// function next(){
		// 	if(i++ >= testViews.length - 1)
		// 		i = 0;

		// 	view.pageIndicator.setPage(i);

		// 	var $view = testViews.eq(i);

		// 	var animationsKeys = _.keys(view.pageTransitions.animations);
		// 	// var key = 'rotateCubeTopOut';
		// 	var key = _.sample(animationsKeys);
		// 	var animation = view.pageTransitions.animations[key];
		// 	view.pageTransitions.changePage($view, {
		// 		animation: animation
		// 	});
		// }
	},

	pageViews: {},
	render: function(){

		// Instantiate each page, if not existent
		var pageViews = this.pageViews;
		for(var k = 0; k < this.pages.length; k++){
			var page = this.pages.at(k);

			// Skip already cached views
			if(pageViews[page.id]) continue;
			console.log(k);

			var pageView = new Modules.PageViews[page.get('module')].view({
				model: page,
				className: 'pt-page',
			});

			pageView.render();
			this.$el.append(pageView.$el);

			// Save on cache
			pageViews[page.id] = pageView;
		}
	},

	// Transition stuff
	lastView: null,
	changeToView: function(nextView, optionalDelay){
		var lastView = this.lastView;
		var view = this;

		if(lastView) lastView.trigger('hide:before');
		if(nextView) nextView.trigger('show:before');

		setTimeout(transitionate, optionalDelay || 0);

		function transitionate(){
			if(!nextView) return afterChangePage();

			view.listenToOnce(view.pageTransitions, 'page-change', afterChangePage);
			console.log((nextView.$el ? true : false));
			view.pageTransitions.changePage(nextView.$el, {
				animation: view.pageTransitions.animations['rotateCubeTopOut'],
			});
		}

		function afterChangePage(){
			if(lastView) lastView.trigger('hide:after');
			if(nextView) nextView.trigger('show:after');
			if(lastView) lastView.trigger('hide');
			if(nextView) nextView.trigger('show');
			view.lastView = nextView;
		}
	},

	getCurrentPageCount: function(){
		return this.pages.length;
	},

	currentPageIndex: -1,
	setCurrentPage: function(index){
		// Skip if equal
		if(this.currentPageIndex == index) return;
		this.currentPageIndex = index;
		// Change page to the cached view at specified index
		this.changeToView(_.toArray(this.pageViews)[this.currentPageIndex]);
		this.updatePageIndicator();
	},

	updatePageIndicator: function(){
		this.pageIndicator
			.setCount(this.getCurrentPageCount())
			.setPage(this.currentPageIndex);
		return this;
	},
});


$(document).ready(function(){


	// setInterval(function(){
	// 	// $('#container').toggleClass('menu-open');
	// 	// $('.flag-3d').toggleClass('flag-hide');
	// }, 3000);
	// pageIndicator.setCount(10);

	App.view = new App.Models.View2();

	var viewController = new GlobalViewController({
		model: App.view,
		el: '#pages',
	});
	// viewController.pageTransitions.changePage($('.pt-page.show'))

	App.view.set(<%- JSON.stringify(view) %>);
	// viewController.render();
})


</script>